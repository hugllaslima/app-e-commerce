name: Deploy to AWS ECS

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_BACKEND_REPOSITORY: ecommerce-backend
  ECR_FRONTEND_REPOSITORY: ecommerce-frontend
  ECS_CLUSTER: ecommerce-cluster
  BACKEND_SERVICE: ecommerce-backend-service
  FRONTEND_SERVICE: ecommerce-frontend-service

jobs:
  deploy-backend:
    name: Deploy Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t backend -f backend/Dockerfile .
          docker tag backend $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker tag backend $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest

      - name: Test Docker Image (Health Check)
        run: |
          docker run -d --name backend-test -p 3001:3001 backend
          echo "Aguardando container iniciar..."
          for i in {1..30}; do
            if curl -f http://localhost:3001/health; then
              echo "Health check passou!"
              docker stop backend-test
              docker rm backend-test
              exit 0
            fi
            echo "Tentativa $i/30 falhou, aguardando..."
            sleep 2
          done
          echo "Health check falhou após 30 tentativas"
          docker logs backend-test
          docker stop backend-test
          docker rm backend-test
          exit 1

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_BACKEND_REPOSITORY:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $BACKEND_SERVICE --force-new-deployment --region $AWS_REGION

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t frontend -f frontend/Dockerfile .
          docker tag frontend $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          docker tag frontend $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest

      - name: Test Docker Image (Health Check)
        run: |
          docker run -d --name frontend-test -p 80:80 frontend
          echo "Aguardando container iniciar..."
          for i in {1..15}; do
            if curl -f http://localhost:80; then
              echo "Health check passou!"
              docker stop frontend-test
              docker rm frontend-test
              exit 0
            fi
            echo "Tentativa $i/15 falhou, aguardando..."
            sleep 2
          done
          echo "Health check falhou após 15 tentativas"
          docker logs frontend-test
          docker stop frontend-test
          docker rm frontend-test
          exit 1

      - name: Push to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_FRONTEND_REPOSITORY:latest

      - name: Deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER --service $FRONTEND_SERVICE --force-new-deployment --region $AWS_REGION
